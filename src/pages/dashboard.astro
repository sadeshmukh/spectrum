---
import Layout from "../layouts/Layout.astro";
import { getSession } from "auth-astro/server";
import { SignOut } from "auth-astro/components";
import { db, UserGuesses, Items, count, desc, eq, sql } from "astro:db";

const session = await getSession(Astro.request);

if (!session) {
  return Astro.redirect("/login");
}

const user = session.user!;

const userGuesses = await db
  .select({ count: count() })
  .from(UserGuesses)
  .where(eq(UserGuesses.userId, user.email));

const bestAccuracy = await db
  .select({ max: sql<number>`MAX(${UserGuesses.accuracy})` })
  .from(UserGuesses)
  .where(eq(UserGuesses.userId, user.email));

const averageAccuracy = await db
  .select({ avg: sql<number>`AVG(${UserGuesses.accuracy})` })
  .from(UserGuesses)
  .where(eq(UserGuesses.userId, user.email));

const recentGuesses = await db
  .select({
    id: UserGuesses.id,
    guess: UserGuesses.guess,
    accuracy: UserGuesses.accuracy,
    submittedAt: UserGuesses.submittedAt,
    itemId: UserGuesses.itemId,
    itemTitle: Items.title,
    itemLink: Items.link,
  })
  .from(UserGuesses)
  .leftJoin(Items, eq(UserGuesses.itemId, Items.id))
  .where(eq(UserGuesses.userId, user.email))
  .orderBy(desc(UserGuesses.submittedAt))
  .limit(5);

const userStats = {
  totalGuesses: userGuesses[0]?.count || 0,
  bestAccuracy: bestAccuracy[0]?.max || 0,
  averageAccuracy: averageAccuracy[0]?.avg || 0,
  isPublic: user.isPublic || false,
  publicUsername: user.publicUsername,
};
---

<Layout title="Dashboard - Spectrum">
  <div class="min-h-screen bg-black">
    <!-- Nav -->
    <nav class="border-b border-gray-800 bg-card">
      <div class="max-w-7xl mx-auto px-6">
        <div class="flex justify-between items-center h-16">
          <h1 class="text-xl font-bold text-white">SPECTRUM</h1>
          <div class="flex items-center gap-4">
            <!-- User Dropdown -->
            <div class="relative">
              <button
                id="userDropdown"
                class="flex items-center gap-2 hover:bg-gray-800/50 rounded-lg p-2 transition-colors"
              >
                <img
                  class="w-8 h-8 rounded-full"
                  src={user.image}
                  alt={user.name}
                />
                <span class="text-white text-sm">{user.name}</span>
                <svg
                  class="w-4 h-4 text-muted"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M19 9l-7 7-7-7"></path>
                </svg>
              </button>

              <!-- Dropdown Menu -->
              <div
                id="userDropdownMenu"
                class="absolute right-0 mt-2 w-64 bg-card border border-gray-700 rounded-lg shadow-lg z-50 hidden"
              >
                <div class="p-4">
                  <div class="flex items-center gap-3 mb-3">
                    <img
                      class="w-12 h-12 rounded-full"
                      src={user.image}
                      alt={user.name}
                    />
                    <div>
                      <p class="text-white text-sm font-medium">{user.name}</p>
                      <p class="text-muted text-xs">{user.email}</p>
                    </div>
                  </div>
                  <div class="border-t border-gray-700 pt-3">
                    <p class="text-muted text-xs">Account</p>
                    <p class="text-white text-sm mt-1">{user.email}</p>
                  </div>
                </div>
              </div>
            </div>

            {
              user.isAdmin && (
                <a
                  href="/admin"
                  class="bg-red-400 text-black px-4 py-2 rounded-lg text-sm font-medium hover:bg-accent/90 transition-colors"
                >
                  Admin Panel
                </a>
              )
            }
            <div class="flex items-center gap-4">
              <div class="flex items-center gap-2">
                <label class="text-muted text-sm">Public Profile</label>
                <button
                  id="toggle-public"
                  class={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                    userStats.isPublic ? "bg-accent" : "bg-gray-600"
                  }`}
                  data-public={userStats.isPublic}
                >
                  <span
                    class={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                      userStats.isPublic ? "translate-x-6" : "translate-x-1"
                    }`}></span>
                </button>
              </div>
              {
                userStats.isPublic && userStats.publicUsername ? (
                  <a
                    href={`/user/${userStats.publicUsername}`}
                    class="text-accent hover:text-accent/80 text-sm transition-colors"
                    target="_blank"
                  >
                    View Profile
                  </a>
                ) : null
              }

              <SignOut class="text-muted hover:text-white text-sm">
                Sign out
              </SignOut>
            </div>
          </div>
        </div>
      </div>
    </nav>

    <!-- Main -->
    <main class="max-w-7xl mx-auto px-6 py-8">
      <!-- Welcome -->
      <div class="mb-8">
        <h2 class="text-2xl font-bold text-white mb-1">
          Welcome back, {user.name?.split(" ")[0]}
        </h2>
      </div>

      <!-- Challenge Section - BIG and Prominent -->
      <div
        class="bg-gradient-to-br from-accent/20 to-accent/5 rounded-xl p-8 mb-8 border border-accent/20"
      >
        <div class="text-center">
          <div
            class="w-20 h-20 bg-accent/20 rounded-full flex items-center justify-center mx-auto mb-6"
          >
            <svg
              class="w-10 h-10 text-accent"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M13 10V3L4 14h7v7l9-11h-7z"></path>
            </svg>
          </div>
          <h3 class="text-3xl font-bold text-white mb-2">Ready to Guess?</h3>
          <p class="text-muted text-lg mb-8">
            <span class="text-accent">ðŸ¤”</span>
            Good luck!
          </p>
          <button
            class="bg-accent text-black px-8 py-4 rounded-lg text-lg font-semibold hover:bg-accent/90 transition-colors transform hover:scale-105 shadow-lg"
            onclick="window.location.href='/guess'"
          >
            MAKE A GUESS
          </button>
        </div>
      </div>

      <!-- Personal Stats -->
      <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
        <div class="bg-card rounded-lg p-6">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-muted text-sm">Your Guesses</p>
              <p class="text-2xl font-bold text-white">
                {userStats.totalGuesses}
              </p>
            </div>
            <div
              class="w-10 h-10 bg-accent/10 rounded-lg flex items-center justify-center"
            >
              <svg
                class="w-5 h-5 text-accent"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"
                ></path>
              </svg>
            </div>
          </div>
        </div>

        <div class="bg-card rounded-lg p-6">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-muted text-sm">Best Accuracy</p>
              <p class="text-2xl font-bold text-white">
                {
                  userStats.bestAccuracy > 0
                    ? `${userStats.bestAccuracy.toFixed(1)}%`
                    : "â€”"
                }
              </p>
            </div>
            <div
              class="w-10 h-10 bg-accent/10 rounded-lg flex items-center justify-center"
            >
              <svg
                class="w-5 h-5 text-accent"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M5 3l14 9-14 9V3z"></path>
              </svg>
            </div>
          </div>
        </div>

        <div class="bg-card rounded-lg p-6">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-muted text-sm">Average Accuracy</p>
              <p class="text-2xl font-bold text-white">
                {
                  userStats.averageAccuracy > 0
                    ? `${userStats.averageAccuracy.toFixed(1)}%`
                    : "â€”"
                }
              </p>
            </div>
            <div
              class="w-10 h-10 bg-accent/10 rounded-lg flex items-center justify-center"
            >
              <svg
                class="w-5 h-5 text-accent"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M11 3.055A9.001 9.001 0 1020.945 13H11V3.055z"></path>
              </svg>
            </div>
          </div>
        </div>
      </div>

      <!-- Recent Activity -->
      <div class="bg-card rounded-lg p-6">
        <h3 class="text-lg font-semibold text-white mb-4">
          Your Recent Guesses
        </h3>
        {
          recentGuesses.length === 0 ? (
            <div class="text-center py-8">
              <div class="w-12 h-12 bg-muted/10 rounded-full flex items-center justify-center mx-auto mb-4">
                <svg
                  class="w-6 h-6 text-muted"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M12 6v6m0 0v6m0-6h6m-6 0H6"
                  />
                </svg>
              </div>
              <p class="text-muted text-sm">No guesses yet</p>
              <p class="text-muted text-xs mt-1">
                Make your first guess to see your activity here
              </p>
            </div>
          ) : (
            <div class="space-y-3">
              {recentGuesses.map((guess) => (
                <div class="flex items-center justify-between p-3 bg-gray-800/30 rounded-lg">
                  <div class="flex items-center gap-3">
                    <div class="w-8 h-8 bg-accent/10 rounded-lg flex items-center justify-center">
                      <svg
                        class="w-4 h-4 text-accent"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"
                        />
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"
                        />
                      </svg>
                    </div>
                    <div>
                      <p class="text-white text-sm font-medium">
                        ${guess.guess}
                      </p>
                      <p class="text-muted text-xs">
                        {guess.itemTitle || "Amazon Item"}
                      </p>
                    </div>
                  </div>
                  <div class="text-right">
                    <p class="text-white text-sm">
                      {guess.submittedAt.toLocaleDateString()}
                    </p>
                    <p class="text-accent text-xs font-medium">
                      {guess.accuracy || 0}% accuracy
                    </p>
                    <a
                      href={`/item-stats/${guess.itemId}`}
                      class="inline-flex items-center text-blue-400 hover:text-blue-300 transition-colors text-xs mt-1"
                    >
                      <svg
                        class="w-3 h-3 mr-1"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"
                        />
                      </svg>
                      View Stats
                    </a>
                  </div>
                </div>
              ))}
            </div>
          )
        }
      </div>
    </main>
  </div>

  <!-- Username Setup Modal -->
  <div
    id="username-modal"
    class="fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center"
    style="display: none;"
  >
    <div
      class="bg-card rounded-xl p-8 max-w-md w-full mx-4 border border-accent/20"
    >
      <div class="text-center mb-6">
        <h3 class="text-2xl font-bold text-white mb-2">Choose Your Username</h3>
        <p class="text-muted">This will be your public profile URL</p>
      </div>

      <div class="space-y-4">
        <div>
          <label
            for="username-input"
            class="block text-white text-sm font-medium mb-2"
          >
            Username
          </label>
          <input
            type="text"
            id="username-input"
            placeholder="Enter username or leave empty for random"
            class="w-full bg-gray-800 text-white px-4 py-3 rounded-lg border border-gray-600 focus:border-accent focus:outline-none"
            maxlength="20"
          />
          <p class="text-muted text-xs mt-1">
            Use only lowercase letters, numbers, and hyphens
          </p>
        </div>

        <div class="flex gap-3">
          <button
            id="generate-username"
            class="flex-1 bg-gray-700 hover:bg-gray-600 text-white px-4 py-3 rounded-lg transition-colors"
          >
            Generate Random
          </button>
          <button
            id="confirm-username"
            class="flex-1 bg-accent hover:bg-accent/90 text-black px-4 py-3 rounded-lg font-medium transition-colors"
          >
            Confirm
          </button>
        </div>

        <button
          id="cancel-username"
          class="w-full text-muted hover:text-white text-sm transition-colors"
        >
          Cancel
        </button>
      </div>
    </div>
  </div>
</Layout>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const toggleButton = document.getElementById(
      "toggle-public"
    ) as HTMLButtonElement;

    toggleButton?.addEventListener("click", async function () {
      try {
        const currentPublic =
          toggleButton.getAttribute("data-public") === "true";
        const newPublic = !currentPublic;

        toggleButton.disabled = true;

        // Remove fetch when enabling public profile, only use modal confirm
        if (newPublic) {
          toggleButton.setAttribute("data-public", newPublic.toString());
          toggleButton.classList.toggle("bg-accent", true);
          toggleButton.classList.toggle("bg-gray-600", false);
          const span = toggleButton.querySelector("span");
          if (span) {
            span.classList.replace("translate-x-1", "translate-x-6");
          }

          // Show username modal
          const usernameModal = document.getElementById("username-modal");
          if (usernameModal) {
            usernameModal.style.display = "flex";
            const usernameInput = document.getElementById(
              "username-input"
            ) as HTMLInputElement;
            usernameInput?.focus();
          }
        } else {
          // Disable public profile via API
          const response = await fetch("/api/user/public-stats", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ isPublic: false }),
          });
          const result = await response.json();
          if (!result.success) {
            alert(result.error || "Failed to update public profile setting");
            return;
          }
          // Remove view profile link if exists
          const viewProfileLink = document.querySelector('a[href^="/user/"]');
          viewProfileLink?.remove();
        }
      } catch (error) {
        console.error("Error updating public profile:", error);
        alert("Error updating public profile setting");
      } finally {
        toggleButton.disabled = false;
      }
    });

    // Handle username setup functionality
    const generateUsernameBtn = document.getElementById(
      "generate-username"
    ) as HTMLButtonElement;
    const confirmUsernameBtn = document.getElementById(
      "confirm-username"
    ) as HTMLButtonElement;
    const usernameInput = document.getElementById(
      "username-input"
    ) as HTMLInputElement;

    generateUsernameBtn?.addEventListener("click", async function () {
      try {
        generateUsernameBtn.disabled = true;
        generateUsernameBtn.textContent = "Generating...";

        const response = await fetch("/api/user/generate-username", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
        });

        const result = await response.json();

        if (result.success) {
          usernameInput.value = result.data.username;
        } else {
          alert("Failed to generate username");
        }
      } catch (error) {
        console.error("Error generating username:", error);
        alert("Error generating username");
      } finally {
        generateUsernameBtn.disabled = false;
        generateUsernameBtn.textContent = "Generate Random";
      }
    });

    confirmUsernameBtn?.addEventListener("click", async function () {
      try {
        confirmUsernameBtn.disabled = true;
        confirmUsernameBtn.textContent = "Confirming...";

        const username = usernameInput.value.trim();
        const response = await fetch("/api/user/public-stats", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            isPublic: true,
            username: username || null,
          }),
        });

        const result = await response.json();

        if (result.success) {
          // Hide modal
          const usernameModal = document.getElementById("username-modal");
          if (usernameModal) {
            usernameModal.style.display = "none";
          }

          // Create and show the "View Profile" link
          const viewProfileLink = document.createElement("a");
          viewProfileLink.href = `/user/${result.data.publicUsername}`;
          viewProfileLink.className =
            "text-accent hover:text-accent/80 text-sm transition-colors";
          viewProfileLink.target = "_blank";
          viewProfileLink.textContent = "View Profile";

          // Insert the link after the toggle button
          const toggleContainer = document.querySelector(
            ".flex.items-center.gap-4"
          );
          if (toggleContainer) {
            toggleContainer.insertBefore(
              viewProfileLink,
              toggleContainer.lastElementChild
            );
          }
        } else {
          alert(result.error || "Failed to set username");
        }
      } catch (error) {
        console.error("Error confirming username:", error);
        alert("Error confirming username");
      } finally {
        confirmUsernameBtn.disabled = false;
        confirmUsernameBtn.textContent = "Confirm";
      }
    });

    // Allow Enter key to confirm username
    usernameInput?.addEventListener("keypress", function (e) {
      if (e.key === "Enter") {
        confirmUsernameBtn?.click();
      }
    });

    // Handle modal close functionality
    const cancelUsernameBtn = document.getElementById(
      "cancel-username"
    ) as HTMLButtonElement;
    const usernameModal = document.getElementById("username-modal");

    // Close modal on cancel
    cancelUsernameBtn?.addEventListener("click", function () {
      if (usernameModal) {
        usernameModal.style.display = "none";
      }
      // Reset toggle button to off since user cancelled
      const toggleButton = document.getElementById(
        "toggle-public"
      ) as HTMLButtonElement;
      if (toggleButton) {
        toggleButton.setAttribute("data-public", "false");
        toggleButton.classList.remove("bg-accent");
        toggleButton.classList.add("bg-gray-600");
        const span = toggleButton.querySelector("span");
        if (span) {
          span.classList.remove("translate-x-6");
          span.classList.add("translate-x-1");
        }
      }
    });

    // Close modal when clicking outside
    usernameModal?.addEventListener("click", function (e) {
      if (e.target === usernameModal) {
        usernameModal.style.display = "none";
        // Reset toggle button to off since user cancelled
        const toggleButton = document.getElementById(
          "toggle-public"
        ) as HTMLButtonElement;
        if (toggleButton) {
          toggleButton.setAttribute("data-public", "false");
          toggleButton.classList.remove("bg-accent");
          toggleButton.classList.add("bg-gray-600");
          const span = toggleButton.querySelector("span");
          if (span) {
            span.classList.remove("translate-x-6");
            span.classList.add("translate-x-1");
          }
        }
      }
    });

    // Close modal on escape key
    document.addEventListener("keydown", function (e) {
      if (e.key === "Escape" && usernameModal?.style.display === "flex") {
        usernameModal.style.display = "none";
        // Reset toggle button to off since user cancelled
        const toggleButton = document.getElementById(
          "toggle-public"
        ) as HTMLButtonElement;
        if (toggleButton) {
          toggleButton.setAttribute("data-public", "false");
          toggleButton.classList.remove("bg-accent");
          toggleButton.classList.add("bg-gray-600");
          const span = toggleButton.querySelector("span");
          if (span) {
            span.classList.remove("translate-x-6");
            span.classList.add("translate-x-1");
          }
        }
      }
    });
  });
</script>

<script>
  // Handle user dropdown functionality
  document.addEventListener("DOMContentLoaded", function () {
    const dropdownButton = document.getElementById("userDropdown");
    const dropdownMenu = document.getElementById("userDropdownMenu");

    // Toggle dropdown when button is clicked
    dropdownButton?.addEventListener("click", function (e) {
      e.stopPropagation();
      dropdownMenu?.classList.toggle("hidden");
    });

    // Close dropdown when clicking outside
    document.addEventListener("click", function (e) {
      const target = e.target as Node;
      if (
        !dropdownButton?.contains(target) &&
        !dropdownMenu?.contains(target)
      ) {
        dropdownMenu?.classList.add("hidden");
      }
    });

    // Close dropdown when pressing escape
    document.addEventListener("keydown", function (e) {
      if (e.key === "Escape") {
        dropdownMenu?.classList.add("hidden");
      }
    });
  });
</script>
