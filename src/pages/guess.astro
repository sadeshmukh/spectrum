---
import Layout from "../layouts/Layout.astro";
import Header from "../components/Header.astro";
import { getSession } from "auth-astro/server";

const session = await getSession(Astro.request);

if (!session) {
  return Astro.redirect("/login");
}

const user = session.user!;

let item;
let errorMessage = null;

try {
  const baseUrl = Astro.url.origin;
  const response = await fetch(`${baseUrl}/api/item/next`, {
    credentials: "include",
    headers: {
      Cookie: Astro.request.headers.get("cookie") || "",
    },
  });
  const result = await response.json();

  if (result.success) {
    item = result.data;
  } else {
    errorMessage = result.message || result.error || "Failed to load item";
    item = {
      id: null,
      title: "No items available",
      photoUrl: "https://via.placeholder.com/400x300?text=No+Items",
      link: "#",
      maxPrice: 100,
    };
  }
} catch (error) {
  console.error("Failed to fetch item:", error);
  errorMessage = "Failed to connect to server";
  item = {
    id: null,
    title: "Connection error",
    photoUrl: "https://via.placeholder.com/400x300?text=Error",
    link: "#",
    maxPrice: 100,
  };
}
---

<Layout title="Guess - Spectrum">
  <div class="min-h-screen bg-black text-white">
    <!-- Toast notification container -->
    <div id="toast-container" class="fixed top-4 right-4 z-50 space-y-2"></div>

    <Header logoHref="/dashboard" navClass="bg-card/50 backdrop-blur-sm">
      <a
        href="/dashboard"
        class="inline-flex items-center gap-2 bg-card hover:bg-card-hover text-white font-medium py-2 px-4 rounded-lg transition-colors border border-gray-700 hover:border-accent/30"
      >
        <svg
          class="w-4 h-4"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
        </svg>
        Back to Dashboard
      </a>
    </Header>

    <div class="container mx-auto px-6">
      <div class="max-w-4xl mx-auto">
        <div class="text-center mb-16">
          {
            errorMessage && (
              <div class="mt-8 bg-card border border-red-500/30 rounded-xl p-6">
                <div class="flex items-center justify-center gap-3 mb-4">
                  <svg
                    class="w-8 h-8 text-red-400"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16c-.77.833.192 2.5 1.732 2.5z"
                    />
                  </svg>
                  <h3 class="text-xl font-bold text-red-400">
                    No Items Available
                  </h3>
                </div>
                <p class="text-muted text-lg mb-4">{errorMessage}</p>
                <a
                  href="/dashboard"
                  class="inline-block bg-accent text-black font-bold py-3 px-6 rounded-lg transition-colors hover:bg-accent/90"
                >
                  Return to Dashboard
                </a>
              </div>
            )
          }
        </div>

        {
          !errorMessage && item?.id && (
            <div class="bg-card rounded-xl p-10 mb-10 border border-gray-700 shadow-xl">
              <div class="grid lg:grid-cols-2 gap-12 items-center">
                <div class="space-y-6">
                  <div class="relative group">
                    <div class="absolute inset-0 bg-gradient-to-r from-accent to-accent/60 rounded-xl blur opacity-20 group-hover:opacity-30 transition-opacity" />
                    <div class="relative bg-gray-800 rounded-xl p-2 border border-gray-700">
                      <img
                        src={
                          item.photoUrl ||
                          "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='400' height='300' viewBox='0 0 400 300'%3E%3Crect width='400' height='300' fill='%23374151'/%3E%3Ctext x='50%25' y='50%25' dominant-baseline='middle' text-anchor='middle' fill='%239CA3AF' font-family='Inter' font-size='16'%3EProduct Image%3C/text%3E%3C/svg%3E"
                        }
                        alt={item.title}
                        class="w-full max-h-96 object-contain rounded-lg"
                      />
                    </div>
                  </div>
                  <div class="text-center space-y-4">
                    <h2 class="text-2xl font-semibold text-white leading-tight">
                      {item.title}
                    </h2>
                    <a
                      href={item.link}
                      target="_blank"
                      rel="noopener noreferrer"
                      id="amazon-link"
                      class="inline-flex items-center text-accent hover:text-accent/80 transition-colors font-medium text-lg"
                      style="display: none;"
                    >
                      <svg
                        class="w-5 h-5 mr-2"
                        fill="currentColor"
                        viewBox="0 0 20 20"
                      >
                        <path
                          fill-rule="evenodd"
                          d="M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z"
                          clip-rule="evenodd"
                        />
                      </svg>
                      View Original
                    </a>
                  </div>
                </div>

                <div class="space-y-8">
                  <div class="space-y-6">
                    <label
                      for="price-guess"
                      class="block text-2xl font-bold text-white"
                    >
                      Your Price Guess
                    </label>
                    <div class="relative">
                      <span class="absolute left-6 top-1/2 transform -translate-y-1/2 text-muted text-2xl font-bold">
                        $
                      </span>
                      <input
                        type="number"
                        id="price-guess"
                        name="price-guess"
                        step="0.01"
                        min="0"
                        max={item.maxPrice}
                        placeholder="0.00"
                        class="w-full pl-14 pr-6 py-6 bg-gray-800 border-2 border-gray-700 rounded-xl text-white placeholder-gray-500 focus:outline-none focus:border-accent text-2xl font-bold transition-colors"
                      />
                    </div>

                    <div class="space-y-4">
                      <div class="flex justify-between items-center">
                        <span class="text-muted font-medium">Quick Select</span>
                        <span class="text-muted font-medium">
                          Max: ${item.maxPrice}
                        </span>
                      </div>
                      <div class="relative">
                        <input
                          type="range"
                          id="price-slider"
                          min="0"
                          max={item.maxPrice}
                          step="0.01"
                          value="0"
                          class="w-full h-3 bg-gray-700 rounded-lg appearance-none cursor-pointer slider"
                        />
                        <div class="flex justify-between text-sm text-muted mt-3 font-medium">
                          <span>$0</span>
                          <span>${Math.round(item.maxPrice / 2)}</span>
                          <span>${item.maxPrice}</span>
                        </div>
                      </div>
                    </div>
                  </div>

                  <button
                    type="button"
                    id="submit-guess"
                    class="w-full bg-accent hover:bg-accent/90 text-black font-bold py-5 px-8 rounded-xl transition-all duration-200 transform hover:scale-105 text-xl border-2 border-accent hover:border-accent/90 shadow-lg hover:shadow-accent/25 hover:cursor-pointer"
                  >
                    SUBMIT GUESS
                  </button>
                </div>
              </div>
            </div>
          )
        }

        <!-- Results section (hidden by default) -->
        <div
          id="results"
          class="bg-card rounded-xl p-10 hidden border border-gray-700 shadow-xl"
        >
          <h3 class="text-4xl font-bold text-center mb-12 text-white">
            RESULTS
          </h3>
          <div class="grid md:grid-cols-3 gap-8">
            <div
              class="bg-gray-800 rounded-xl p-8 text-center border border-gray-700"
            >
              <div class="text-muted mb-4 text-lg font-medium">YOUR GUESS</div>
              <div id="user-guess" class="text-4xl font-bold text-white">
                $0.00
              </div>
            </div>
            <div
              class="bg-gray-800 rounded-xl p-8 text-center border border-gray-700"
            >
              <div class="text-muted mb-4 text-lg font-medium">
                ACTUAL PRICE
              </div>
              <div id="actual-price" class="text-4xl font-bold text-accent">
                $0.00
              </div>
            </div>
            <div
              class="bg-gray-800 rounded-xl p-8 text-center border border-gray-700"
            >
              <div class="text-muted mb-4 text-lg font-medium">ACCURACY</div>
              <div id="accuracy" class="text-4xl font-bold text-orange-400">
                0%
              </div>
            </div>
          </div>
          <div class="mt-12 text-center space-y-4">
            <div class="text-muted mb-4">
              <span id="countdown">30</span> seconds until next item...
            </div>
            <div class="flex gap-4 justify-center">
              <button
                type="button"
                id="share-result"
                class="bg-gray-700 hover:bg-gray-600 text-white font-bold py-4 px-8 rounded-xl transition-all duration-200 text-lg border-2 border-gray-600 hover:border-gray-500"
              >
                SHARE CHALLENGE
              </button>
              <button
                type="button"
                id="next-item"
                class="bg-accent hover:bg-accent/90 text-black font-bold py-4 px-10 rounded-xl transition-all duration-200 text-lg border-2 border-accent hover:border-accent/90"
              >
                NEXT ITEM NOW →
              </button>
            </div>
            {
              user.isAdmin && item?.id && (
                <div class="pt-4">
                  <a
                    href={`/item-stats/${item.id}`}
                    class="inline-flex items-center text-accent hover:text-accent/80 transition-colors font-medium"
                  >
                    <svg
                      class="w-5 h-5 mr-2"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"
                      />
                    </svg>
                    View Item Statistics
                  </a>
                </div>
              )
            }
          </div>
        </div>

        <!-- Share Modal -->
        <div
          id="share-modal"
          class="fixed inset-0 bg-black/80 backdrop-blur-sm z-50 hidden"
        >
          <div class="flex items-center justify-center min-h-screen p-6">
            <div
              class="bg-card rounded-xl p-8 max-w-md w-full border border-gray-700 shadow-2xl"
            >
              <div class="text-center space-y-6">
                <div class="flex items-center justify-center gap-3 mb-6">
                  <svg
                    class="w-8 h-8 text-accent"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z"
                    ></path>
                  </svg>
                  <h3 class="text-2xl font-bold text-white">
                    Share Your Result
                  </h3>
                </div>

                <div id="share-content" class="space-y-4">
                  <div
                    class="bg-gray-800 rounded-lg p-4 border border-gray-700"
                  >
                    <div class="text-muted text-sm mb-2">Your Score</div>
                    <div
                      id="share-accuracy"
                      class="text-3xl font-bold text-accent"
                    >
                      0%
                    </div>
                    <div class="text-muted text-sm mt-1">
                      Guess: <span id="share-guess">$0.00</span> | Actual: <span
                        id="share-actual">$0.00</span
                      >
                    </div>
                  </div>

                  <div class="text-muted text-sm">
                    Challenge your friends to beat your score!
                  </div>
                </div>

                <div id="share-actions" class="flex gap-3 pt-4">
                  <button
                    type="button"
                    id="share-copy"
                    class="flex-1 bg-accent hover:bg-accent/90 text-black font-bold py-3 px-4 rounded-lg transition-colors"
                  >
                    Copy Challenge Link
                  </button>
                </div>

                <!-- Public profile required message (hidden by default) -->
                <div id="public-profile-required" class="space-y-4 hidden">
                  <div
                    class="bg-gray-800 rounded-lg p-6 border border-yellow-500/30"
                  >
                    <div class="flex items-center justify-center gap-3 mb-4">
                      <svg
                        class="w-8 h-8 text-yellow-400"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16c-.77.833.192 2.5 1.732 2.5z"
                        ></path>
                      </svg>
                      <h3 class="text-xl font-bold text-yellow-400">
                        Public Profile Required
                      </h3>
                    </div>
                    <p class="text-muted text-center mb-4">
                      You need a public profile to create challenges and share
                      your results with friends.
                    </p>
                    <div class="text-center">
                      <a
                        href="/dashboard"
                        class="inline-block bg-accent text-black font-bold py-3 px-6 rounded-lg transition-colors hover:bg-accent/90"
                      >
                        Make Profile Public
                      </a>
                    </div>
                  </div>
                </div>

                <button
                  type="button"
                  id="close-share-modal"
                  class="w-full bg-gray-700 hover:bg-gray-600 text-white font-bold py-3 px-4 rounded-lg transition-colors"
                >
                  Close
                </button>
              </div>
            </div>
          </div>
        </div>

        <!-- Loading state -->
        <div id="loading" class="text-center hidden">
          <div
            class="inline-block animate-spin rounded-full h-16 w-16 border-b-4 border-green-500 mb-6"
          >
          </div>
          <p class="text-xl text-gray-300 font-medium">
            Calculating your score...
          </p>
        </div>
      </div>
    </div>
  </div>

  <style>
    .slider {
      -webkit-appearance: none;
      appearance: none;
    }

    .slider::-webkit-slider-thumb {
      -webkit-appearance: none;
      appearance: none;
      width: 24px;
      height: 24px;
      border-radius: 50%;
      background: #00ff88;
      cursor: pointer;
      box-shadow: 0 4px 12px rgba(0, 255, 136, 0.4);
      border: 2px solid #00cc6a;
    }

    .slider::-moz-range-thumb {
      width: 24px;
      height: 24px;
      border-radius: 50%;
      background: #00ff88;
      cursor: pointer;
      border: 2px solid #00cc6a;
      box-shadow: 0 4px 12px rgba(0, 255, 136, 0.4);
    }

    .slider::-webkit-slider-track {
      background: linear-gradient(to right, #374151, #00ff88);
      height: 12px;
      border-radius: 6px;
    }

    .slider::-moz-range-track {
      background: linear-gradient(to right, #374151, #00ff88);
      height: 12px;
      border-radius: 6px;
      border: none;
    }

    .toast {
      background: #1f2937;
      border: 1px solid #374151;
      border-radius: 12px;
      padding: 16px 20px;
      min-width: 300px;
      max-width: 400px;
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.5);
      transform: translateX(100%);
      opacity: 0;
      transition: all 0.3s ease;
    }

    .toast.show {
      transform: translateX(0);
      opacity: 1;
    }

    .toast.error {
      border-color: #dc2626;
      background: #1f2937;
    }

    .toast.error .toast-icon {
      color: #ef4444;
    }

    .toast.warning {
      border-color: #d97706;
      background: #1f2937;
    }

    .toast.warning .toast-icon {
      color: #f59e0b;
    }

    .toast.success {
      border-color: #059669;
      background: #1f2937;
    }

    .toast.success .toast-icon {
      color: #10b981;
    }
  </style>

  <script define:vars={{ item }}>
    const submitButton = document.getElementById("submit-guess");
    const nextButton = document.getElementById("next-item");
    const priceInput = document.getElementById("price-guess");
    const priceSlider = document.getElementById("price-slider");
    const resultsDiv = document.getElementById("results");
    const loadingDiv = document.getElementById("loading");
    const userGuessSpan = document.getElementById("user-guess");
    const actualPriceSpan = document.getElementById("actual-price");
    const accuracySpan = document.getElementById("accuracy");
    const amazonLink = document.getElementById("amazon-link");
    const countdownSpan = document.getElementById("countdown");
    const shareModal = document.getElementById("share-modal");
    const shareResultBtn = document.getElementById("share-result");
    const closeShareModalBtn = document.getElementById("close-share-modal");
    const shareAccuracy = document.getElementById("share-accuracy");
    const shareGuess = document.getElementById("share-guess");
    const shareActual = document.getElementById("share-actual");
    const shareCopyBtn = document.getElementById("share-copy");
    const shareContent = document.getElementById("share-content");
    const shareActions = document.getElementById("share-actions");
    const publicProfileRequired = document.getElementById(
      "public-profile-required"
    );

    function showToast(message, type = "error") {
      const container = document.getElementById("toast-container");
      const toast = document.createElement("div");
      toast.className = `toast ${type}`;

      const icons = {
        error: `<svg class="w-5 h-5 toast-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>`,
        warning: `<svg class="w-5 h-5 toast-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16c-.77.833.192 2.5 1.732 2.5z" />
        </svg>`,
        success: `<svg class="w-5 h-5 toast-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
        </svg>`,
      };

      toast.innerHTML = `
        <div class="flex items-start gap-3">
          ${icons[type]}
          <div class="flex-1">
            <p class="text-white font-medium">${message}</p>
          </div>
          <button class="text-gray-400 hover:text-white transition-colors" onclick="this.parentElement.parentElement.remove()">
            <svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
      `;

      container.appendChild(toast);

      setTimeout(() => {
        toast.classList.add("show");
      }, 100);

      setTimeout(() => {
        toast.classList.remove("show");
        setTimeout(() => {
          if (toast.parentElement) {
            toast.remove();
          }
        }, 300);
      }, 5000);
    }

    // Sync slider and input
    priceSlider?.addEventListener("input", () => {
      if (priceInput) {
        priceInput.value = priceSlider.value;
      }
    });

    priceInput?.addEventListener("input", () => {
      if (priceSlider) {
        priceSlider.value = priceInput.value;
      }
    });

    submitButton?.addEventListener("click", async () => {
      const guess = parseFloat(priceInput?.value || "0");

      if (!guess || guess <= 0) {
        showToast("Please enter a valid price", "warning");
        return;
      }

      // Show loading state
      loadingDiv?.classList.remove("hidden");
      if (submitButton) submitButton.disabled = true;

      try {
        const response = await fetch("/api/item/submit", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            itemId: item.id,
            guess: guess,
          }),
        });

        const result = await response.json();

        if (!result.success) {
          throw new Error(result.error || "Failed to submit guess");
        }

        // Update results display
        if (userGuessSpan)
          userGuessSpan.textContent = `$${result.data.userGuess.toFixed(2)}`;
        if (actualPriceSpan)
          actualPriceSpan.textContent = `$${result.data.actualPrice.toFixed(2)}`;
        if (accuracySpan) accuracySpan.textContent = `${result.data.accuracy}%`;

        // Show Amazon link after successful submission
        if (amazonLink) amazonLink.style.display = "inline-flex";

        // Hide loading and show results
        loadingDiv?.classList.add("hidden");
        resultsDiv?.classList.remove("hidden");

        // Disable further submissions for this item
        if (submitButton) {
          submitButton.disabled = true;
          submitButton.textContent = "GUESS SUBMITTED";
        }
        if (priceInput) priceInput.disabled = true;
        if (priceSlider) priceSlider.disabled = true;

        // auto-load next item after 30 seconds with countdown
        let countdown = 30;
        countdownInterval = setInterval(() => {
          countdown--;
          if (countdownSpan) countdownSpan.textContent = countdown.toString();

          if (countdown <= 0) {
            clearInterval(countdownInterval);
            if (result.data.nextItem) {
              window.location.reload();
            }
          }
        }, 1000);
      } catch (error) {
        console.error("Error submitting guess:", error);
        showToast("Error submitting guess. Please try again.", "error");
        loadingDiv?.classList.add("hidden");
        if (submitButton) submitButton.disabled = false;
      }
    });

    let countdownInterval = null;

    nextButton?.addEventListener("click", async () => {
      // Clear countdown if running
      if (countdownInterval) {
        clearInterval(countdownInterval);
        countdownInterval = null;
      }

      loadingDiv?.classList.remove("hidden");
      if (nextButton) nextButton.disabled = true;

      try {
        const response = await fetch("/api/item/next", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
        });

        const result = await response.json();

        if (!result.success) {
          throw new Error(result.error || "Failed to get next item");
        }

        window.location.reload();
      } catch (error) {
        console.error("Error getting next item:", error);
        showToast("Error loading next item. Please try again.", "error");
        loadingDiv?.classList.add("hidden");
        if (nextButton) nextButton.disabled = false;
      }
    });

    // share!!
    shareResultBtn?.addEventListener("click", async () => {
      if (shareModal) {
        shareModal.classList.remove("hidden");

        // check for existing
        try {
          const profileResponse = await fetch("/api/user/profile", {
            headers: {
              "Content-Type": "application/json",
            },
          });

          const profileResult = await profileResponse.json();

          if (
            profileResult.success &&
            profileResult.data.isPublic &&
            profileResult.data.publicUsername
          ) {
            // user has public profile - show normal share content
            if (shareContent) shareContent.classList.remove("hidden");
            if (shareActions) shareActions.classList.remove("hidden");
            if (publicProfileRequired)
              publicProfileRequired.classList.add("hidden");

            if (shareAccuracy && accuracySpan) {
              shareAccuracy.textContent = accuracySpan.textContent;
            }
            if (shareGuess && userGuessSpan) {
              shareGuess.textContent = userGuessSpan.textContent;
            }
            if (shareActual && actualPriceSpan) {
              shareActual.textContent = actualPriceSpan.textContent;
            }

            // auto create challenge when modal opens
            if (item?.id) {
              const guess = parseFloat(
                userGuessSpan?.textContent?.replace("$", "") || "0"
              );
              const accuracy = parseInt(
                accuracySpan?.textContent?.replace("%", "") || "0"
              );

              try {
                const response = await fetch("/api/challenge/create", {
                  method: "POST",
                  headers: {
                    "Content-Type": "application/json",
                  },
                  body: JSON.stringify({
                    itemId: item.id,
                    guess: guess,
                    accuracy: accuracy,
                    maxPrice: item.maxPrice,
                  }),
                });

                const result = await response.json();

                if (result.success) {
                  // store the challenge URL for copying
                  if (shareCopyBtn) {
                    shareCopyBtn.dataset.challengeUrl =
                      result.data.challengeUrl;
                  }
                } else {
                  console.error("Failed to create challenge:", result.error);
                  showToast(
                    result.error || "Failed to create challenge",
                    "error"
                  );
                }
              } catch (error) {
                console.error("Error creating challenge:", error);
              }
            }
          } else {
            if (shareContent) shareContent.classList.add("hidden");
            if (shareActions) shareActions.classList.add("hidden");
            if (publicProfileRequired)
              publicProfileRequired.classList.remove("hidden");
          }
        } catch (error) {
          console.error("Error checking profile status:", error);
          // fallback + shouldn't happen ideally
          if (shareContent) shareContent.classList.add("hidden");
          if (shareActions) shareActions.classList.add("hidden");
          if (publicProfileRequired)
            publicProfileRequired.classList.remove("hidden");
        }
      }
    });

    // copy link functionality
    shareCopyBtn?.addEventListener("click", async () => {
      const challengeUrl = shareCopyBtn.dataset.challengeUrl;

      if (challengeUrl) {
        try {
          await navigator.clipboard.writeText(challengeUrl);
          showToast("Challenge link copied to clipboard!", "success");
        } catch (error) {
          console.error("Error copying to clipboard:", error);
          showToast("Failed to copy link. Please copy manually.", "error");
        }
      } else {
        showToast("Challenge link not available", "error");
      }
    });

    closeShareModalBtn?.addEventListener("click", () => {
      if (shareModal) {
        shareModal.classList.add("hidden");
      }
    });

    // close on outside click
    shareModal?.addEventListener("click", (e) => {
      if (e.target === shareModal) {
        shareModal.classList.add("hidden");
      }
    });

    // close on escape key
    document.addEventListener("keydown", (e) => {
      if (
        e.key === "Escape" &&
        shareModal &&
        !shareModal.classList.contains("hidden")
      ) {
        shareModal.classList.add("hidden");
      }
    });
  </script>
</Layout>
