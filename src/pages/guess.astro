---
import Layout from "../layouts/Layout.astro";
import { getSession } from "auth-astro/server";

const session = await getSession(Astro.request);

if (!session) {
  return Astro.redirect("/login");
}

const user = session.user!;

let item;
let errorMessage = null;

try {
  const baseUrl = Astro.url.origin;
  const response = await fetch(`${baseUrl}/api/get-next`, {
    credentials: "include",
    headers: {
      Cookie: Astro.request.headers.get("cookie") || "",
    },
  });
  const result = await response.json();

  if (result.success) {
    item = result.data;
  } else {
    errorMessage = result.message || result.error || "Failed to load item";
    item = {
      id: null,
      title: "No items available",
      photoUrl: "https://via.placeholder.com/400x300?text=No+Items",
      link: "#",
      maxPrice: 100,
    };
  }
} catch (error) {
  console.error("Failed to fetch item:", error);
  errorMessage = "Failed to connect to server";
  item = {
    id: null,
    title: "Connection error",
    photoUrl: "https://via.placeholder.com/400x300?text=Error",
    link: "#",
    maxPrice: 100,
  };
}
---

<Layout title="Guess - Spectrum">
  <div class="min-h-screen bg-black text-white font-mono">
    <div class="container mx-auto px-6 py-12">
      <div class="max-w-4xl mx-auto">
        <div class="text-center mb-16">
          <h1 class="text-6xl font-bold mb-6 text-white tracking-tight">
            GUESS THE PRICE
          </h1>
          <p class="text-xl text-gray-400 font-light">
            Test your Amazon pricing intuition
          </p>
          {
            errorMessage && (
              <div class="mt-8 bg-red-900/20 border border-red-500/30 rounded-2xl p-6">
                <div class="flex items-center justify-center gap-3 mb-4">
                  <svg
                    class="w-8 h-8 text-red-400"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16c-.77.833.192 2.5 1.732 2.5z"
                    />
                  </svg>
                  <h3 class="text-xl font-bold text-red-400">
                    No Items Available
                  </h3>
                </div>
                <p class="text-red-300 text-lg mb-4">{errorMessage}</p>
                <a
                  href="/dashboard"
                  class="inline-block bg-red-600 hover:bg-red-500 text-white font-bold py-3 px-6 rounded-2xl transition-colors"
                >
                  Return to Dashboard
                </a>
              </div>
            )
          }
        </div>

        {
          !errorMessage && item?.id && (
            <div class="bg-gray-900 rounded-3xl p-10 mb-10 border border-gray-800 shadow-2xl">
              <div class="grid lg:grid-cols-2 gap-12 items-center">
                <div class="space-y-6">
                  <div class="relative group">
                    <div class="absolute inset-0 bg-gradient-to-r from-green-500 to-emerald-600 rounded-2xl blur opacity-20 group-hover:opacity-30 transition-opacity" />
                    <div class="relative bg-gray-800 rounded-2xl p-2 border border-gray-700">
                      <img
                        src={
                          item.photoUrl ||
                          "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='400' height='300' viewBox='0 0 400 300'%3E%3Crect width='400' height='300' fill='%23374151'/%3E%3Ctext x='50%25' y='50%25' dominant-baseline='middle' text-anchor='middle' fill='%239CA3AF' font-family='monospace' font-size='16'%3EProduct Image%3C/text%3E%3C/svg%3E"
                        }
                        alt={item.title}
                        class="w-full h-80 object-cover rounded-xl"
                      />
                    </div>
                  </div>
                  <div class="text-center space-y-4">
                    <h2 class="text-2xl font-semibold text-gray-100 leading-tight">
                      {item.title}
                    </h2>
                    <a
                      href={item.link}
                      target="_blank"
                      rel="noopener noreferrer"
                      id="amazon-link"
                      class="inline-flex items-center text-orange-400 hover:text-orange-300 transition-colors font-medium text-lg"
                      style="display: none;"
                    >
                      <svg
                        class="w-5 h-5 mr-2"
                        fill="currentColor"
                        viewBox="0 0 20 20"
                      >
                        <path
                          fill-rule="evenodd"
                          d="M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z"
                          clip-rule="evenodd"
                        />
                      </svg>
                      View Original
                    </a>
                  </div>
                </div>

                <div class="space-y-8">
                  <div class="space-y-6">
                    <label
                      for="price-guess"
                      class="block text-2xl font-bold text-gray-200"
                    >
                      Your Price Guess
                    </label>
                    <div class="relative">
                      <span class="absolute left-6 top-1/2 transform -translate-y-1/2 text-gray-400 text-2xl font-bold">
                        $
                      </span>
                      <input
                        type="number"
                        id="price-guess"
                        name="price-guess"
                        step="0.01"
                        min="0"
                        max={item.maxPrice}
                        placeholder="0.00"
                        class="w-full pl-14 pr-6 py-6 bg-gray-800 border-2 border-gray-700 rounded-2xl text-white placeholder-gray-500 focus:outline-none focus:border-green-500 text-2xl font-bold transition-colors"
                      />
                    </div>

                    <div class="space-y-4">
                      <div class="flex justify-between items-center">
                        <span class="text-gray-400 font-medium">
                          Quick Select
                        </span>
                        <span class="text-gray-400 font-medium">
                          Max: ${item.maxPrice}
                        </span>
                      </div>
                      <div class="relative">
                        <input
                          type="range"
                          id="price-slider"
                          min="0"
                          max={item.maxPrice}
                          step="0.01"
                          value="0"
                          class="w-full h-3 bg-gray-700 rounded-lg appearance-none cursor-pointer slider"
                        />
                        <div class="flex justify-between text-sm text-gray-500 mt-3 font-medium">
                          <span>$0</span>
                          <span>${Math.round(item.maxPrice / 2)}</span>
                          <span>${item.maxPrice}</span>
                        </div>
                      </div>
                    </div>
                  </div>

                  <button
                    type="button"
                    id="submit-guess"
                    class="w-full bg-green-600 hover:bg-green-500 text-white font-bold py-5 px-8 rounded-2xl transition-all duration-200 transform hover:scale-105 text-xl border-2 border-green-600 hover:border-green-500 shadow-lg hover:shadow-green-500/25"
                  >
                    SUBMIT GUESS
                  </button>
                </div>
              </div>
            </div>
          )
        }

        <!-- Results section (hidden by default) -->
        <div
          id="results"
          class="bg-gray-900 rounded-3xl p-10 hidden border border-gray-800 shadow-2xl"
        >
          <h3 class="text-4xl font-bold text-center mb-12 text-white">
            RESULTS
          </h3>
          <div class="grid md:grid-cols-3 gap-8">
            <div
              class="bg-gray-800 rounded-2xl p-8 text-center border border-gray-700"
            >
              <div class="text-gray-400 mb-4 text-lg font-medium">
                YOUR GUESS
              </div>
              <div id="user-guess" class="text-4xl font-bold text-white">
                $0.00
              </div>
            </div>
            <div
              class="bg-gray-800 rounded-2xl p-8 text-center border border-gray-700"
            >
              <div class="text-gray-400 mb-4 text-lg font-medium">
                ACTUAL PRICE
              </div>
              <div id="actual-price" class="text-4xl font-bold text-green-400">
                $0.00
              </div>
            </div>
            <div
              class="bg-gray-800 rounded-2xl p-8 text-center border border-gray-700"
            >
              <div class="text-gray-400 mb-4 text-lg font-medium">ACCURACY</div>
              <div id="accuracy" class="text-4xl font-bold text-orange-400">
                0%
              </div>
            </div>
          </div>
          <div class="mt-12 text-center space-y-4">
            <div class="text-gray-400 mb-4">
              <span id="countdown">10</span> seconds until next item...
            </div>
            <button
              type="button"
              id="next-item"
              class="bg-green-600 hover:bg-green-500 text-white font-bold py-4 px-10 rounded-2xl transition-all duration-200 text-lg border-2 border-green-600 hover:border-green-500"
            >
              NEXT ITEM NOW →
            </button>
            {
              user.isAdmin && item?.id && (
                <div class="pt-4">
                  <a
                    href={`/item-stats/${item.id}`}
                    class="inline-flex items-center text-blue-400 hover:text-blue-300 transition-colors font-medium"
                  >
                    <svg
                      class="w-5 h-5 mr-2"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"
                      />
                    </svg>
                    View Item Statistics
                  </a>
                </div>
              )
            }
          </div>
        </div>

        <!-- Loading state -->
        <div id="loading" class="text-center hidden">
          <div
            class="inline-block animate-spin rounded-full h-16 w-16 border-b-4 border-green-500 mb-6"
          >
          </div>
          <p class="text-xl text-gray-300 font-medium">
            Calculating your score...
          </p>
        </div>
      </div>
    </div>
  </div>

  <style>
    .slider {
      -webkit-appearance: none;
      appearance: none;
    }

    .slider::-webkit-slider-thumb {
      -webkit-appearance: none;
      appearance: none;
      width: 24px;
      height: 24px;
      border-radius: 50%;
      background: #10b981;
      cursor: pointer;
      box-shadow: 0 4px 12px rgba(16, 185, 129, 0.4);
      border: 2px solid #059669;
    }

    .slider::-moz-range-thumb {
      width: 24px;
      height: 24px;
      border-radius: 50%;
      background: #10b981;
      cursor: pointer;
      border: 2px solid #059669;
      box-shadow: 0 4px 12px rgba(16, 185, 129, 0.4);
    }

    .slider::-webkit-slider-track {
      background: linear-gradient(to right, #374151, #10b981);
      height: 12px;
      border-radius: 6px;
    }

    .slider::-moz-range-track {
      background: linear-gradient(to right, #374151, #10b981);
      height: 12px;
      border-radius: 6px;
      border: none;
    }
  </style>

  <script define:vars={{ item }}>
    const submitButton = document.getElementById("submit-guess");
    const nextButton = document.getElementById("next-item");
    const priceInput = document.getElementById("price-guess");
    const priceSlider = document.getElementById("price-slider");
    const resultsDiv = document.getElementById("results");
    const loadingDiv = document.getElementById("loading");
    const userGuessSpan = document.getElementById("user-guess");
    const actualPriceSpan = document.getElementById("actual-price");
    const accuracySpan = document.getElementById("accuracy");
    const amazonLink = document.getElementById("amazon-link");
    const countdownSpan = document.getElementById("countdown");

    // Sync slider and input
    priceSlider?.addEventListener("input", () => {
      if (priceInput) {
        priceInput.value = priceSlider.value;
      }
    });

    priceInput?.addEventListener("input", () => {
      if (priceSlider) {
        priceSlider.value = priceInput.value;
      }
    });

    submitButton?.addEventListener("click", async () => {
      const guess = parseFloat(priceInput?.value || "0");

      if (!guess || guess <= 0) {
        alert("Please enter a valid price");
        return;
      }

      // Show loading state
      loadingDiv?.classList.remove("hidden");
      if (submitButton) submitButton.disabled = true;

      try {
        const response = await fetch("/api/submit-guess", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            itemId: item.id,
            guess: guess,
          }),
        });

        const result = await response.json();

        if (!result.success) {
          throw new Error(result.error || "Failed to submit guess");
        }

        // Update results display
        if (userGuessSpan)
          userGuessSpan.textContent = `$${result.data.userGuess.toFixed(2)}`;
        if (actualPriceSpan)
          actualPriceSpan.textContent = `$${result.data.actualPrice.toFixed(2)}`;
        if (accuracySpan) accuracySpan.textContent = `${result.data.accuracy}%`;

        // Show Amazon link after successful submission
        if (amazonLink) amazonLink.style.display = "inline-flex";

        // Hide loading and show results
        loadingDiv?.classList.add("hidden");
        resultsDiv?.classList.remove("hidden");

        // Disable further submissions for this item
        if (submitButton) {
          submitButton.disabled = true;
          submitButton.textContent = "GUESS SUBMITTED";
        }
        if (priceInput) priceInput.disabled = true;
        if (priceSlider) priceSlider.disabled = true;

        // Auto-load next item after 3 seconds with countdown
        let countdown = 10;
        countdownInterval = setInterval(() => {
          countdown--;
          if (countdownSpan) countdownSpan.textContent = countdown.toString();

          if (countdown <= 0) {
            clearInterval(countdownInterval);
            if (result.data.nextItem) {
              window.location.reload();
            }
          }
        }, 1000);
      } catch (error) {
        console.error("Error submitting guess:", error);
        alert("Error submitting guess. Please try again.");
        loadingDiv?.classList.add("hidden");
        if (submitButton) submitButton.disabled = false;
      }
    });

    let countdownInterval = null;

    nextButton?.addEventListener("click", async () => {
      // Clear countdown if running
      if (countdownInterval) {
        clearInterval(countdownInterval);
        countdownInterval = null;
      }

      loadingDiv?.classList.remove("hidden");
      if (nextButton) nextButton.disabled = true;

      try {
        const response = await fetch("/api/next-item", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
        });

        const result = await response.json();

        if (!result.success) {
          throw new Error(result.error || "Failed to get next item");
        }

        window.location.reload();
      } catch (error) {
        console.error("Error getting next item:", error);
        alert("Error loading next item. Please try again.");
        loadingDiv?.classList.add("hidden");
        if (nextButton) nextButton.disabled = false;
      }
    });
  </script>
</Layout>
