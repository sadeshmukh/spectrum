import { writeFile } from "fs/promises";
import { join, dirname } from "path";
import { fileURLToPath } from "url";
import { rewriteTitles } from "./lib/title-rewriter";

interface MockProduct {
  link: string;
  title: string;
  actualPrice: number;
  photoUrl?: string;
}

const PRODUCT_CATEGORIES = {
  Electronics: [
    { name: "Wireless Bluetooth Headphones", priceRange: [25, 200] },
    { name: "Smartphone Case", priceRange: [10, 50] },
    { name: "USB-C Charging Cable", priceRange: [8, 25] },
    { name: "Portable Power Bank", priceRange: [20, 80] },
    { name: "Wireless Mouse", priceRange: [15, 60] },
    { name: "Mechanical Keyboard", priceRange: [50, 200] },
    { name: "Gaming Headset", priceRange: [30, 150] },
    { name: "Webcam", priceRange: [25, 100] },
    { name: "Bluetooth Speaker", priceRange: [20, 120] },
    { name: "Tablet Stand", priceRange: [15, 45] },
  ],
  "Home & Garden": [
    { name: "Coffee Maker", priceRange: [30, 150] },
    { name: "Throw Blanket", priceRange: [15, 60] },
    { name: "Desk Lamp", priceRange: [20, 80] },
    { name: "Plant Pot", priceRange: [8, 40] },
    { name: "Kitchen Knife Set", priceRange: [25, 120] },
    { name: "Yoga Mat", priceRange: [15, 50] },
    { name: "Water Bottle", priceRange: [10, 35] },
    { name: "Backpack", priceRange: [25, 100] },
    { name: "Air Fryer", priceRange: [50, 200] },
    { name: "Protein Powder", priceRange: [20, 80] },
  ],
  Fashion: [
    { name: "Running Shoes", priceRange: [40, 150] },
    { name: "Denim Jeans", priceRange: [30, 100] },
    { name: "T-Shirt", priceRange: [10, 40] },
    { name: "Sunglasses", priceRange: [15, 80] },
    { name: "Watch", priceRange: [25, 200] },
    { name: "Handbag", priceRange: [20, 120] },
    { name: "Sneakers", priceRange: [35, 120] },
    { name: "Hoodie", priceRange: [25, 80] },
    { name: "Dress", priceRange: [30, 100] },
    { name: "Jacket", priceRange: [40, 150] },
  ],
};

const BRANDS = [
  "Generic",
  "Premium",
  "EcoFriendly",
  "TechPro",
  "HomeStyle",
  "FashionForward",
  "QualityFirst",
  "SmartChoice",
  "BestValue",
  "Elite",
];

const FEATURES = [
  "Wireless",
  "Bluetooth",
  "Rechargeable",
  "Portable",
  "Waterproof",
  "Eco-Friendly",
  "Premium",
  "Smart",
  "Compact",
  "Professional",
];

function getRandomPrice(min: number, max: number): number {
  const price = min + Math.random() * (max - min);
  return Math.round(price * 100) / 100;
}

function generateProductName(category: string, product: any): string {
  const brand = BRANDS[Math.floor(Math.random() * BRANDS.length)];
  const feature =
    Math.random() > 0.5
      ? FEATURES[Math.floor(Math.random() * FEATURES.length)]
      : "";
  const name = product.name;

  if (feature) {
    return `${brand} ${feature} ${name}`;
  }
  return `${brand} ${name}`;
}

function generateMockProducts(count: number = 100): MockProduct[] {
  const products: MockProduct[] = [];
  const categories = Object.keys(PRODUCT_CATEGORIES);

  for (let i = 0; i < count; i++) {
    const category = categories[Math.floor(Math.random() * categories.length)];
    const categoryProducts =
      PRODUCT_CATEGORIES[category as keyof typeof PRODUCT_CATEGORIES];
    const productTemplate =
      categoryProducts[Math.floor(Math.random() * categoryProducts.length)];

    const title = generateProductName(category, productTemplate);
    const actualPrice = getRandomPrice(
      productTemplate.priceRange[0],
      productTemplate.priceRange[1]
    );

    const productId = Math.random().toString(36).substring(2, 8).toUpperCase();
    const link = `https://mock.spectrum.sahil.ink/product/${productId}`;

    const photoUrl = `https://placehold.co/300x300?text=${encodeURIComponent(
      title.split(" ")[0]
    )}`;

    products.push({
      link,
      title,
      actualPrice,
      photoUrl,
    });
  }

  return products;
}

async function main() {
  try {
    console.log("Generating mock product data...");

    const products = generateMockProducts(150);

    await rewriteTitles(products);

    const outputPath = join(
      dirname(fileURLToPath(import.meta.url)),
      "..",
      "db",
      "scraped-items.ts"
    );

    const miniWarning =
      "// This file is auto-generated by scripts/mock-populate.ts";
    const fileContent = `${miniWarning}\n\nexport const scrapedItems = ${JSON.stringify(
      products,
      null,
      2
    )} as const;
`;

    await writeFile(outputPath, fileContent, "utf-8");

    console.log(`Wrote ${products.length} mock products to ${outputPath}`);

    console.log("\nSample products:");
    products.slice(0, 5).forEach((product, index) => {
      console.log(`${index + 1}. ${product.title} - $${product.actualPrice}`);
    });
  } catch (error) {
    console.error("Error generating mock data:", error);
    process.exit(1);
  }
}

main();
